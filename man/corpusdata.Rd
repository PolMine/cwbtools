% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CorpusData.R
\docType{data}
\name{CorpusData}
\alias{CorpusData}
\title{Manage Corpus Data and Encode CWB Corpus.}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
CorpusData
}
\description{
#' @section Arguments:
\describe{
  \item{\code{x}}{single filename, a character vector of filenames, or a directory with XML files}
  \item{\code{body}}{xpath expression defining the body of the xml document}
  \item{\code{meta}}{named character vector with xpath expressions}
  \item{\code{mc}}{numeric/integer value, number of cores to use}
  \item{\code{compress}}{logical, whether to compress corpus}
  \item{\code{encoding}}{encoding/charst of the CWB corpus }
  \item{\code{registry_dir}}{corpus registry, the directory where registry files are stored}
  \item{\code{corpus}}{the name of the CWB corpus}
  \item{\code{p_attributes}}{...}
  \item{\code{s_attributes}}{columns of ... that will be encoded as structural attributes}
  \item{\code{data_dir}}{directory where to create directory for indexed corpus files}
  \item{\code{method}}{either "R" or "CWB"}
  \item{\code{verbose}}{logical, whether to be verbose}
}
}
\section{Methods}{

\describe{
  \item{\code{$new()}}{Initialize a new instance of class \code{CorpusData}.}
  \item{\code{$print()}}{Print summary of \code{CorpusData} object.}
  \item{\code{$tokenize(verbose = TRUE)}}{Simple tokenization of text in chunktable.}
  \item{\code{$add_corpus_positions(verbose = TRUE)}}{Add column \code{cpos} to tokenstream and
  columns \code{cpos_left} and \code{cpos_right} to metadata.}
  \item{\code{encode(corpus, p_attributes = "word", s_attributes = NULL, encoding, registry_dir = Sys.getenv("CORPUS_REGISTRY"), data_dir = NULL, method = c("R", "CWB"), verbose = TRUE, compress = FALSE)}}{Encode corpus.}
  \item{\code{$import_xml(x, body = "//body", meta = NULL, mc = NULL)}}{}
}
}

\examples{
library(RcppCWB)
library(data.table)
if (!cwb_is_installed()) cwb_install()

registry_rcppcwb <- system.file(package = "RcppCWB", "extdata", "cwb", "registry")

s_attrs_places <- s_attribute_decode(
  corpus = "REUTERS",
  data_dir = registry_file_parse("REUTERS", registry_dir = registry_rcppcwb)[["home"]],
  s_attribute = "places", method = "R"
)
s_attrs_places[["id"]] <- 1:nrow(s_attrs_places)
setnames(s_attrs_places, old = "value", new = "places")

tokens <- apply(s_attrs_places, 1, function(row){
  ids <- cl_cpos2id(
    corpus = "REUTERS", cpos = row[1]:row[2],
    p_attribute = "word", registry = registry_rcppcwb
  )
  cl_id2str(corpus = "REUTERS", id = ids, p_attribute = "word", registry = registry_rcppcwb)
})
tokenstream <- rbindlist(
lapply(
  1:length(tokens),
  function(i) data.table(id = i, word = tokens[[i]]))
  )
tokenstream[["cpos"]] <- 1:nrow(tokenstream)

CD <- CorpusData$new()
CD$tokenstream <- as.data.table(tokenstream)
CD$metadata <- as.data.table(s_attrs_places)

tmpdir <- tempdir()
if (.Platform$OS.type == "windows") tmpdir <- normalizePath(tmpdir, winslash = "/")
dir.create (registry_tmp <- file.path(tmpdir, "registry"))
dir.create(data_dir_tmp <- file.path(tmpdir, "data_dir"))

CD$encode(corpus = "REUTERS", encoding = "utf8",
          p_attributes = "word", s_attributes = "places",
          registry_dir = registry_tmp,
          data_dir = data_dir_tmp, method = "R"
)
reg <- registry_data(name = "REUTERS", id = "REUTERS", home = data_dir_tmp, p_attributes = "word")
registry_file_write(data = reg, corpus = "REUTERS", registry_dir = registry_tmp)
cl_cpos2id(corpus = "REUTERS", p_attribute = "word", cpos = 0L:4049L, registry = registry_tmp)
}
\keyword{datasets}
