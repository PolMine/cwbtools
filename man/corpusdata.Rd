% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/corpusdata.R
\name{corpusdata_encode}
\alias{corpusdata_encode}
\alias{corpusdata_add_corpus_positions}
\alias{corpusdata_tokenize}
\title{Encode CWB corpus based on corpusdata.}
\usage{
corpusdata_encode(x, corpus, p_attributes = "word", s_attributes = NULL,
  encoding, registry_dir = Sys.getenv("CORPUS_REGISTRY"), data_dir = NULL,
  method = c("R", "CWB"), verbose = TRUE, make = FALSE)

corpusdata_add_corpus_positions(x, verbose = TRUE)

corpusdata_tokenize(x, verbose = TRUE)
}
\arguments{
\item{x}{an object of class \code{corpusdata}}

\item{corpus}{the name of the CWB corpus}

\item{p_attributes}{bla bla}

\item{s_attributes}{columns of .Object that will be encoded as structural attributes}

\item{encoding}{encoding/charst of the CWB corpus}

\item{registry_dir}{corpus registry, the directory where registry files are stored}

\item{data_dir}{directory where to create directory for indexed corpus files}

\item{method}{either "R" or "CWB"}

\item{verbose}{logical, whether to be verbose}

\item{make}{logical, whether to run \code{cwb-make}}
}
\description{
\code{encode_structural_attribute} will add a structural attribute to a
corpus from a data.table with three columns: The left corpus position, the
right corpus position and the value of a s-attribute that will be encoded.
}
\details{
\code{corpusdata_add_corpus_positions} will add columns cpos_left and
cpos_right to table with structural attributes. A precondition is that a
column 'id' is present in tables 'tokenstream' and 'metadata'."

\code{corpusdata_tokenize} will tokenize the tokenstream in ...
}
\examples{
library(RcppCWB)
registry_rcppcwb <- system.file(package = "RcppCWB", "extdata", "cwb", "registry")

s_attrs_places <- s_attribute_decode(
  corpus = "REUTERS",
  data_dir = registry_file_parse("REUTERS", registry_dir = registry_rcppcwb)[["home"]],
  s_attribute = "places", method = "R"
)
s_attrs_places[["id"]] <- 1:nrow(s_attrs_places)
setnames(s_attrs_places, old = "value", new = "places")

tokens <- apply(s_attrs_places, 1, function(row){
  ids <- cl_cpos2id(corpus = "REUTERS", cpos = row[1]:row[2], p_attribute = "word", registry = registry_rcppcwb)
  cl_id2str(corpus = "REUTERS", id = ids, p_attribute = "word", registry = registry_rcppcwb)
})
tokenstream <- rbindlist(lapply(1:length(tokens), function(i) data.table(id = i, word = tokens[[i]])))
tokenstream[["cpos"]] <- 1:nrow(tokenstream)
cdata <- list(tokenstream = tokenstream, metadata = s_attrs_places)
class(cdata) <- "corpusdata"

tmpdir <- tempdir()
if (.Platform$OS.type == "windows") tmpdir <- normalizePath(tmpdir, winslash = "/")
dir.create (registry_tmp <- file.path(tmpdir, "registry"))
dir.create(data_dir_tmp <- file.path(tmpdir, "data_dir"))

corpusdata_encode(
  x = cdata, corpus = "REUTERS", encoding = "utf8",
  p_attributes = "word", s_attributes = "places",
  registry_dir = registry_tmp,
  data_dir = data_dir_tmp, method = "R"
)
}
