% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/p_attribute.R
\name{p_attribute_encode}
\alias{p_attribute_encode}
\title{Encode Positional Attributes.}
\usage{
p_attribute_encode(token_stream, p_attribute = "word", registry_dir, corpus,
  data_dir, method = c("R", "CWB"), verbose = TRUE,
  encoding = get_encoding(token_stream), compress = NULL)
}
\arguments{
\item{token_stream}{a character vector with the tokens of the corpus}

\item{p_attribute}{the positional attribute}

\item{registry_dir}{registry directory (needed by \code{p_attribute_huffcode} and \code{p_attribute_compress_rdx})}

\item{corpus}{the CWB corpus (needed by \code{p_attribute_huffcode} and \code{p_attribute_compress_rdx})}

\item{data_dir}{the data directory for the corpus with the binary files}

\item{method}{either 'CWB' or 'R'}

\item{verbose}{logical}

\item{encoding}{encoding of the data}

\item{compress}{logical}
}
\description{
Pure R implementation to generate positional attribute from a character vector of
tokens (the token stream).
}
\details{
Four steps generate the binary CWB corpus data format for positional
attributes: First, encode a character vector (the token stream) using
\code{p_attribute_encode}. Second, create reverse index using
\code{p_attribute_makeall}. Third, compress token stream using
\code{p_attribute_huffcode}. Fourth, compress index files using
\code{p_attribute_compress_rdx}.

The implementation for the first two steps (\code{p_attribute_encode} and
\code{p_attribute_makeall}) is a pure R implementation (so far). These two
steps are enough to use the CQP functionality. To run \code{p_attribute_huffcode}
and \code{p_attribute_compress_rdx}, an installation of the CWB is required.

See the CQP Corpus Encoding Tutorial
(\url{http://cwb.sourceforge.net/files/CWB_Encoding_Tutorial.pdf}) for an
explanation of the procedure (section 3, ``Indexing and compression without
CWB/Perl'').
}
\examples{
library(RcppCWB)
if (!cwb_is_installed()) cwb_install()
tokens <- readLines(system.file(package = "RcppCWB", "extdata", "examples", "reuters.txt"))

tmpdir <- tempdir()
if (.Platform$OS.type == "windows") tmpdir <- normalizePath(tmpdir, winslash = "/")
registry_tmp <- file.path(tmpdir, "registry")
data_dir_tmp <- file.path(tmpdir, "data_dir")
if (!file.exists(registry_tmp)) dir.create (registry_tmp)
if (!file.exists(data_dir_tmp)) dir.create(data_dir_tmp)

p_attribute_encode(
  corpus = "reuters",
  token_stream = tokens, p_attribute = "word",
  data_dir = data_dir_tmp, method = "R",
  registry_dir = registry_tmp,
  compress = FALSE,
  encoding = "utf8"
  )

regdata <- registry_data(
  id = "REUTERS", name = "Reuters Sample Corpus", home = data_dir_tmp,
  properties = c(encoding = "utf-8", language = "en"), p_attributes = "word"
)
regfile <- registry_file_write(
  data = regdata, corpus = "REUTERS",
  registry_dir = registry_tmp, data_dir = data_dir_tmp,
)
if (cqp_is_initialized()) cqp_reset_registry(registry_tmp) else cqp_initialize(registry_tmp)

cqp_query(corpus = "REUTERS", query = '[]{3} "oil" []{3};')
regions <- cqp_dump_subcorpus(corpus = "REUTERS")
kwic <- apply(regions, 1, function(region){
  ids <- cl_cpos2id("REUTERS", "word", registry_tmp, cpos = region[1]:region[2])
  words <- cl_id2str(corpus = "REUTERS", p_attribute = "word", registry = registry_tmp, id = ids)
  paste0(words, collapse = " ")
})
kwic[1:10]
}
